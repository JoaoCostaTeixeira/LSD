library ieee;
use ieee.std_logic_1164.all;

entity parking_Phase1 is
	port( KEY 		: in std_logic_vector(1 downto 0);
			LEDR		: out std_logic_vector(1 downto 0);
			LEDG		: out std_logic_vector(8 downto 8);
			CLOCK_50	: in std_logic);
end parking_Phase1;


architecture Shell of parking_Phase1 is
	signal s_clk_2hz, s_pulseOut, s_clk_s : std_logic;
begin

t1:	entity work.CounterN (Behav)
			generic map(TIME_S => 10)	-- Time in seconds (10 s)
			port map(clk		=> s_clk_s, 
						reset 	=> '0',
						start		=> not KEY(0),
						pulseOut	=> s_pulseOut);
						
Freq1s:	entity work.freqDivider(Behavioral)
			generic map(DIV_FACTOR => 50E6) -- divisor para 1s
			port map(clkIn		=> CLOCK_50,
						clkOut	=> s_clk_s);

f1:	entity work.freqDivider(Behavioral)
			generic map(DIV_FACTOR => 25E6)	-- divisor para 2hz
			port map(clkIn		=> CLOCK_50,
						clkOut	=> s_clk_2hz);
						
f2: entity work.timer(Behavioral)
			generic map(TIME_S => 1)	-- Time in seconds (1 s)
			port map(clk		=> s_clk_s, 
						reset 	=> '0',
						start		=> not KEY(0),
						pulseOut	=> s_pulseOut);
						
f3: entity work.timer(Behavioral)
			generic map(TIME_S => 2)	-- Time in seconds (2 s)
			port map(clk		=> s_clk_s, 
						reset 	=> '0',
						start		=> not KEY(0),
						pulseOut	=> s_pulseOut);
						
						
						
						
						
						
						
						
						
						
						
						
						
						
		LEDR(0) <= s_pulseOut;
		LEDG(8) <= s_pulseOut and s_clk_2hz;
end Shell;
